name: Build

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      platform:
        required: true
        type: string
      pio_env:
        required: true
        type: string
  workflow_dispatch:
    inputs:
      version:
        required: true
        type: string
      platform:
        required: true
        type: string
      pio_env:
        required: true
        type: string

jobs:
  pio-build:
    name: build-${{ inputs.platform }}
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          repository: meshtastic/firmware
          ref: master

      - name: apply patches for ${{ inputs.platform }}
        id: patch
        env:
          PIO_PLATFORM: ${{ inputs.platform }}
          PIO_ENV: ${{ inputs.pio_env }}
        run: |
          git clone https://github.com/Kazagumo/meshtastic_autobuild ./autobuild_tmp
          for file in ./autobuild_tmp/patches/$PIO_PLATFORM/$PIO_ENV/*; do
            echo "apply patch $file"
            git apply $file
          done

      - name: Set OTA firmware source and target
        if: startsWith(inputs.platform, 'esp32')
        id: ota_dir
        env:
          PIO_PLATFORM: ${{ inputs.platform }}
        run: |
          if [ "$PIO_PLATFORM" = "esp32s3" ]; then
            echo "src=firmware-s3.bin" >> $GITHUB_OUTPUT
            echo "tgt=release/bleota-s3.bin" >> $GITHUB_OUTPUT
          elif [ "$PIO_PLATFORM" = "esp32c3" ] || [ "$PIO_PLATFORM" = "esp32c6" ]; then
            echo "src=firmware-c3.bin" >> $GITHUB_OUTPUT
            echo "tgt=release/bleota-c3.bin" >> $GITHUB_OUTPUT
          elif [ "$PIO_PLATFORM" = "esp32" ]; then
            echo "src=firmware.bin" >> $GITHUB_OUTPUT
            echo "tgt=release/bleota.bin" >> $GITHUB_OUTPUT
          fi

      - name: Build ${{ inputs.pio_env }}
        id: build
        uses: meshtastic/gh-action-firmware@main
        with:
          pio_platform: ${{ inputs.platform }}
          pio_env: ${{ inputs.pio_env }}
          pio_target: build
          ota_firmware_source: ${{ steps.ota_dir.outputs.src || '' }}
          ota_firmware_target: ${{ steps.ota_dir.outputs.tgt || '' }}

      - name: Upload packages
        uses: ncipollo/release-action@v1
        with:
          name: ${{ inputs.version }}
          allowUpdates: true
          tag: ${{ inputs.version }}
          commit: main
          token: ${{secrets.GITHUB_TOKEN}}
          replacesArtifacts: true
          artifacts: |
            release/*.bin
            release/*.elf
            release/*.uf2
            release/*.hex
            release/*-ota.zip

      - name: Cleanup Workflow Logs
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{secrets.GITHUB_TOKEN}}
          repository: ${{ github.repository }}
          retain_days: 1
        continue-on-error: true

      - name: Delete Older Releases
        uses: dev-drprasad/delete-older-releases@master
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        continue-on-error: true

      - name: Cleanup Old Action Artifacts
        uses: c-hive/gha-remove-artifacts@master
        with:
          age: '3 days'
          skip-recent: 3
        continue-on-error: true

      - name: Cleanup Workflow Logs
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{secrets.GITHUB_TOKEN}}
          repository: ${{ github.repository }}
          retain_days: 3
        continue-on-error: true

      - name: Store binaries as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ inputs.platform }}-${{ inputs.pio_env }}-${{ inputs.version }}.zip
          overwrite: true
          path: |
            release/*.bin
            release/*.elf
            release/*.uf2
            release/*.hex
            release/*-ota.zip
